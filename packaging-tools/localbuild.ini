[Generic]
LICENSE=                                opensource

RELEASE_DESCRIPTION_FILE=               releases/release-56
EXPORT_OPENSOURCE_INSTALLER=
CONFIGURATIONS_FILE_BASE_DIR=           configurations/
ONLINE_REPOSITORY_BASE_NAME=            qtsdkrepository

[InstallerFramework.Build]
IFW_GIT_URL=                            ssh://codereview.qt-project.org:29418/installer-framework/installer-framework.git
IFW_GIT_VERSION=                        2.0
IFW_QT_SRC_PKG=                         http://download.qt.io/official_releases/qt/5.7/5.7.0/single/qt-everywhere-opensource-src-5.7.0.tar.gz
IFW_QT_EXTRA_CONFIGURE_OPTIONS=
IFW_OPENSSL_DIR=                        /usr/local/ssl
IFW_REMOTE_RESULT_DEST_DIR_NAME=        mylocalbuild
IFW_DEBUG_BUILD=                        false
CREATE_MAINTENANCE_TOOL_RESOURCE_FILE=  yes
# Create an installer that installs the ifw tools (i.e. installer inside the installer)
CREATE_IFW_INSTALLER=
IFW_EXPORT_SNAPSHOT=

# Build artifacts are uploaded here. Can be local disk or network disk.
# If this is a network disk ensure the ssh connection works.
[Server.LocalStorage]
PACKAGE_STORAGE_SERVER=                 127.0.0.1
PACKAGE_STORAGE_SERVER_USER=            %(user)s
PACKAGE_STORAGE_SERVER_BASE_DIR=        %(home)s/build
PACKAGE_STORAGE_SERVER_PATH_HTTP=       %(home)s/build

# If you wish to upload builds to external server for others to access them.
# This connection is ssh piped through the Server.LocalStorage server so make sure the
# ssh connection works from Server.LocalStorage into Server.External
[Server.External]
SNAPSHOT_SERVER=
SNAPSHOT_SERVER_PATH=
# TODO, same as SNAPSHOT_SERVER?
EXT_SERVER_BASE_URL=                    127.0.0.1
EXT_SERVER_BASE_PATH=                   %(home)s/build/ext_online_base_path

# When you build online repositories and want to upload them to staging server for testing purposes
[Server.Online.Staging]
DO_UPDATE_STAGING_REPOSITORY=           yes
PKG_STAGING_SERVER=                     127.0.0.1
PKG_STAGING_SERVER_UNAME=               %(user)s
STAGING_SRV_ONLINE_REPO_BASE_PATH=      %(home)s/build/online_repository
REPO_STAGING_SERVER_HOME=               %(home)s/dev

# These are the online repositories that contains the production content.
# Usually these repositories/directories are synced to real production mirrors separately.
[Server.Online.Production]
DO_UPDATE_PRODUCTION_REPOSITORY=        yes
PROD_USER=                              %(user)s
PROD_ADDR=                              127.0.0.1
PROD_SRV_REPO_BASE_PATH=                %(home)s/build/online_repository/production
PROD_SRV_REPO_PENDING_AREA_DIR=         %(home)s/build/online_repository/production_pending
REPO_STAGING_SERVER_TEST_REPO_DIST_WORK= %(home)s/build/online_repository/production_dist_update_work

[QtCreator.Build]
QT_CREATOR_GIT_URL=                     ssh://codereview.qt-project.org:29418/qt-creator/qt-creator.git
QT_CREATOR_GIT_BRANCH=                  4.2
QT_CREATOR_VERSION=                     4.2.0
INSTALLER_PATCH=
QT_CREATOR_EDITION_NAME=                57x
QTC_QT_BASE_DIR=                        qt/5.7/latest

# For clang
CLANG_FILEBASE=                         qtcreator_libclang/libclang-release_38
QTC_PLATFORM=                           linux-x86_64

# TODO, win build only?
NODE_VS_V=                              vs2013
D3D_URL=                                http://download.qt.io/development_releases/prebuilt/d3dcompiler/msvc2013/d3dcompiler_47-x86.7z
OPENGLSW_URL=                           http://download.qt.io/development_releases/prebuilt/llvmpipe/windows/opengl32sw-32.7z
# TODO, linux only?
QTC_ARCH=                               x86_64
# mac, windows-vs2015
QTC_PLATFORM=                           linux-x86_64
[QtCreator.Build.Plugin]
plugins=                                PerfParser, GammarayIntegration
[QtCreator.Build.Plugin.PerfParser]
QTC_PLUGIN_GIT_URL=                     ssh://codereview.qt-project.org/qt-creator/perfparser.git
QTC_PLUGIN_GIT_BRANCH_OR_TAG=           4.2
QTC_PLUGIN_CHECKOUT_DIR_NAME=           perfparser
[QtCreator.Build.Plugin.GammarayIntegration]
QTC_PLUGIN_GIT_URL=                     ssh://codereview.qt-project.org/qt-creator/kdab-plugin-gammaray.git
QTC_PLUGIN_GIT_BRANCH_OR_TAG=           4.2
QTC_PLUGIN_CHECKOUT_DIR_NAME=           gammarayintegration

[GammaRay.Build]
GAMMARAY_INTEGRATION_GIT_URL=           ssh://codereview.qt-project.org/qt-creator/kdab-plugin-gammaray.git
GAMMARAY_INTEGRATION_GIT_BRANCH_OR_TAG= 4.2

GAMMARAY_VERSION=                       QtC4.2-Qt5.8
GAMMARAY_BASE_DIR=                      gammaray/QtC4.2-Qt5.8.x/latest

# TODO, make this the same as QTC_QT_BASE_DIR
QT_BASE_PATH=                           qt/5.7/latest
[OpenSSL]
OPENSSL_LIBS=

[Signing]
SIGNING_SERVER=
SIGNING_PASSWORD=
SIGNING_IDENTITY=
SIGNING_FLAGS=

# Release Test Automation
[RTA]
RTA_SERVER_BASE_URL=

[ICU]
ICU_LIBS=                               http://download.qt.io/development_releases/prebuilt/icu/prebuilt/56.1/icu-linux-g++-Rhel6.6-x64.7z
ICU_VERSION=                            56.1
ICU_SRC_PKG_URL=                        http://download.qt.io/development_releases/prebuilt/icu/src/icu4c-56_1-src.tgz
